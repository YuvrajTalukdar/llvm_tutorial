Work to be done in experiment7:-
0. Basically experiment6 by entirely on AST.
1. Fix the RecoveryExpr. NOT ATTEMPTED

-FunctionDecl 0x5b483d021ca8 <input.cc:1:1, line:6:1> line:1:5 add_sub 'int (int, int)'
| |-ParmVarDecl 0x5b483d021b40 <col:13, col:17> col:17 used x 'int'
| |-ParmVarDecl 0x5b483d021bc0 <col:19, col:23> col:23 used y 'int'
| `-CompoundStmt 0x5b483d0220a0 <line:2:1, line:6:1>
|   |-DeclStmt 0x5b483d021e28 <line:3:5, col:10>
|   | `-VarDecl 0x5b483d021dc0 <col:5, col:9> col:9 used z 'int'
|   |-BinaryOperator 0x5b483d022038 <line:4:5, col:23> '<dependent type>' contains-errors '='
|   | |-DeclRefExpr 0x5b483d021e40 <col:5> 'int' lvalue Var 0x5b483d021dc0 'z' 'int'
|   | `-BinaryOperator 0x5b483d022018 <col:7, col:23> '<dependent type>' contains-errors '+'
|   |   |-RecoveryExpr 0x5b483d021f28 <col:7, col:14> '<dependent type>' contains-errors lvalue
|   |   | |-UnresolvedLookupExpr 0x5b483d021e60 <col:7> '<overloaded function type>' lvalue (ADL) = 'add' empty
|   |   | |-DeclRefExpr 0x5b483d021ea0 <col:11> 'int' lvalue ParmVar 0x5b483d021b40 'x' 'int'
|   |   | `-DeclRefExpr 0x5b483d021ec0 <col:13> 'int' lvalue ParmVar 0x5b483d021bc0 'y' 'int'
|   |   `-RecoveryExpr 0x5b483d021fe0 <col:16, col:23> '<dependent type>' contains-errors lvalue
|   |     |-UnresolvedLookupExpr 0x5b483d021f60 <col:16> '<overloaded function type>' lvalue (ADL) = 'sub' empty
|   |     |-DeclRefExpr 0x5b483d021fa0 <col:20> 'int' lvalue ParmVar 0x5b483d021b40 'x' 'int'
|   |     `-DeclRefExpr 0x5b483d021fc0 <col:22> 'int' lvalue ParmVar 0x5b483d021bc0 'y' 'int'
|   `-ReturnStmt 0x5b483d022090 <line:5:5, col:12>
|     `-ImplicitCastExpr 0x5b483d022078 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5b483d022058 <col:12> 'int' lvalue Var 0x5b483d021dc0 'z' 'int'

2. Creating a new for loop node. DONE
3. Get the parent compound statement for the encaptulating target statement. DONE
4. Set compoundStmt got in step 3 in the body of for loop node. DONE 
5. Create a Stmt vector of the Stmt present in the target function's compound statement.
6. Inject the for loop in the Stmt vector created in step 5.
7. Create a new compound Stmt from the Stmt vector.
8. Set the compount Stmt created in step 7 as the fody of the target function.
9. Generate the new source code from the mutated AST. 

10. MutateAST2.cpp: Advanced example to ast mutation.
    a. for(int a=0;a<10;a++)//E
        {//C

        }
    b. c'//
        if(a<5)
        {
            a+=7;
            cout<<a;
        }
        else
        {
            a-=7;
            cout<<a;
        }
        a=a*8-4;

    c. transform this 
    int main()
    {
        int x=7;
        for(int a=0;a<10;a++)//E
        {//C
            x+=add(4,7);
            x=x*4+sub(7,x);
        }
        cout<<x;
        return 0;
    }
    
    to

    int main()
    {
        int x=7;
        for(int a=0;a<10;a++)//E
        {//C'
            if(a>10)
            {
                x+=add(4,a);
                x=x*4+sub(a,x);
            }
            else
            {
                x-=add(4,a);
                x=x/4-sub(a,x);
            }
        }
        cout<<x;
        return 0;
    }